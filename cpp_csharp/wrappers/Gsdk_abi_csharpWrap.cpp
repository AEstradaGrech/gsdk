/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// SWIG will auto-generate code that uses "strncpy".  That function will generate a compiler warning that indicates
// that we should use "strncpy_s" instead.  However, modifying the auto-generated code isn't an option.
// Therefore, the "_CRT_SECURE_NO_WARNINGS" macro is defined and the warnings are disabled.  The catch is that we don't want the 
// warnings disabled across all of the files in this project, just in the code generated by SWIG.
// That means we have to disable pre-compiled headers for the auto-generated code because this symbol
// has to be defined before we include the header that contains the deprecated functions.  If we were to 
// put the macro definition in the pre-compiled header then it would apply to all files in this project
// and that's not desirable.
#define _CRT_SECURE_NO_WARNINGS
#include "pch.h"
#include "..\cppsdk\gsdk.h"



#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_interop_gsdk(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_interop_gsdk(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_interop_gsdk(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include <string>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *new_std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg___SWIG_2(int capacity){
        std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Microsoft::Azure::Gaming::ConnectedPlayer std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__getitemcopy(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Microsoft::Azure::Gaming::ConnectedPlayer const &std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__getitem(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__setitem(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,Microsoft::Azure::Gaming::ConnectedPlayer const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__AddRange(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__GetRange(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Insert(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,Microsoft::Azure::Gaming::ConnectedPlayer const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__InsertRange(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__RemoveAt(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__RemoveRange(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Repeat(Microsoft::Azure::Gaming::ConnectedPlayer const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >(count, value);
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Reverse__SWIG_0(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Reverse__SWIG_1(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__SetRange(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *self,int index,std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< std::string,std::string >::mapped_type const &std_map_Sl_std_string_Sc_std_string_Sg__getitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__Add(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &val){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::string >(key, val));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__Remove(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(std::map< std::string,std::string > *self){
        return new std::map< std::string, std::string, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::string >::key_type const &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }

#include <time.h>
using namespace Microsoft::Azure::Gaming;


    class ShutdownCallback{
        public:
            virtual void OnShutdown() = 0;
            virtual ~ShutdownCallback() {};
    };

    class HealthCallback{
        public:
            virtual bool OnHealthCheck() = 0;
            virtual ~HealthCallback() {};
    };

    class MaintenanceCallback{
        public:
            virtual void OnMaintenanceScheduled(time_t newTimeUtc) = 0;
            virtual ~MaintenanceCallback() {};
    };

    bool readyForPlayers()
    {
        return Microsoft::Azure::Gaming::GSDK::readyForPlayers();
    }

    std::map<std::string, std::string> getConfigSettings()
    {
        // TODO: Workaround since SWIG doesn't support unordered_map yet
        auto config = Microsoft::Azure::Gaming::GSDK::getConfigSettings();
        return std::map<std::string, std::string>(config.begin(), config.end());
    }

    void start()
    {
        Microsoft::Azure::Gaming::GSDK::start();
    }

    // Considered using an array of "ConnectedPlayer" here instead of a std::vector in order to keep STL code
    // out of the ABI.  However, the default behavior from SWIG is to create a copy of all of the
    // elements in the array when it is passed from Java to C++.  Then in the C++ code we would have 
    // created yet another copy of all of the elements when we convered the array into a std::vector.
    // By including the std::vector directly in our method signature we save one copy.
    void updateConnectedPlayers( std::vector< ConnectedPlayer > currentlyConnectedPlayers )
    {
        Microsoft::Azure::Gaming::GSDK::updateConnectedPlayers(currentlyConnectedPlayers);
    }

    void registerShutdownCallback(ShutdownCallback* callback)
    {
        auto callbackFunction = [=]()
        {
            // What happens if "callback" gets de-allocated?
            callback->OnShutdown();
        };

        Microsoft::Azure::Gaming::GSDK::registerShutdownCallback(callbackFunction);
    }

    void registerHealthCallback(HealthCallback* callback)
    {
        auto callbackFunction = [=]()
        {
            // What happens if "callback" gets de-allocated?
            return callback->OnHealthCheck();
        };

        Microsoft::Azure::Gaming::GSDK::registerHealthCallback(callbackFunction);
    }

    void registerMaintenanceCallback(MaintenanceCallback* callback)
    {
        auto callbackFunction = [=](tm newTimeUtc)
        {
            time_t newTime = _mkgmtime(&newTimeUtc);
            return callback->OnMaintenanceScheduled(newTime);
        };

        Microsoft::Azure::Gaming::GSDK::registerMaintenanceCallback(callbackFunction);
    }

    void logMessage(std::string message)
    {
        Microsoft::Azure::Gaming::GSDK::logMessage(message);
    }

    const std::string &getLogsDirectory()
    {
        return Microsoft::Azure::Gaming::GSDK::getLogsDirectory();
    }



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Gsdk_abi_csharpWrap.h"

SwigDirector_interop_ShutdownCallback::SwigDirector_interop_ShutdownCallback() : ShutdownCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_interop_ShutdownCallback::OnShutdown() {
  if (!swig_callbackOnShutdown) {
    throw Swig::DirectorPureVirtualException("ShutdownCallback::OnShutdown");
  } else {
    swig_callbackOnShutdown();
  }
}

SwigDirector_interop_ShutdownCallback::~SwigDirector_interop_ShutdownCallback() {
  
}


void SwigDirector_interop_ShutdownCallback::swig_connect_director(SWIG_Callback0_t callbackOnShutdown) {
  swig_callbackOnShutdown = callbackOnShutdown;
}

void SwigDirector_interop_ShutdownCallback::swig_init_callbacks() {
  swig_callbackOnShutdown = 0;
}

SwigDirector_interop_HealthCallback::SwigDirector_interop_HealthCallback() : HealthCallback(), Swig::Director() {
  swig_init_callbacks();
}

bool SwigDirector_interop_HealthCallback::OnHealthCheck() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackOnHealthCheck) {
    throw Swig::DirectorPureVirtualException("HealthCallback::OnHealthCheck");
  } else {
    jresult = (unsigned int) swig_callbackOnHealthCheck();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_interop_HealthCallback::~SwigDirector_interop_HealthCallback() {
  
}


void SwigDirector_interop_HealthCallback::swig_connect_director(SWIG_Callback0_t callbackOnHealthCheck) {
  swig_callbackOnHealthCheck = callbackOnHealthCheck;
}

void SwigDirector_interop_HealthCallback::swig_init_callbacks() {
  swig_callbackOnHealthCheck = 0;
}

SwigDirector_interop_MaintenanceCallback::SwigDirector_interop_MaintenanceCallback() : MaintenanceCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_interop_MaintenanceCallback::OnMaintenanceScheduled(time_t newTimeUtc) {
  long long jnewTimeUtc  ;
  
  if (!swig_callbackOnMaintenanceScheduled) {
    throw Swig::DirectorPureVirtualException("MaintenanceCallback::OnMaintenanceScheduled");
  } else {
    jnewTimeUtc = newTimeUtc;
    swig_callbackOnMaintenanceScheduled(jnewTimeUtc);
  }
}

SwigDirector_interop_MaintenanceCallback::~SwigDirector_interop_MaintenanceCallback() {
  
}


void SwigDirector_interop_MaintenanceCallback::swig_connect_director(SWIG_Callback0_t callbackOnMaintenanceScheduled) {
  swig_callbackOnMaintenanceScheduled = callbackOnMaintenanceScheduled;
}

void SwigDirector_interop_MaintenanceCallback::swig_init_callbacks() {
  swig_callbackOnMaintenanceScheduled = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayer_m_playerId_set___(void * jarg1, char * jarg2) {
  Microsoft::Azure::Gaming::ConnectedPlayer *arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->m_playerId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayer_m_playerId_get___(void * jarg1) {
  char * jresult ;
  Microsoft::Azure::Gaming::ConnectedPlayer *arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg1; 
  result = (std::string *) & ((arg1)->m_playerId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ConnectedPlayer___(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Microsoft::Azure::Gaming::ConnectedPlayer *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (Microsoft::Azure::Gaming::ConnectedPlayer *)new Microsoft::Azure::Gaming::ConnectedPlayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_ConnectedPlayer___(void * jarg1) {
  Microsoft::Azure::Gaming::ConnectedPlayer *arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *) 0 ;
  
  arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_GSDKInitializationException___(void * jarg1) {
  Microsoft::Azure::Gaming::GSDKInitializationException *arg1 = (Microsoft::Azure::Gaming::GSDKInitializationException *) 0 ;
  
  arg1 = (Microsoft::Azure::Gaming::GSDKInitializationException *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_readyForPlayers___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Microsoft::Azure::Gaming::GSDK::readyForPlayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_getConfigSettings___() {
  void * jresult ;
  std::unordered_map< std::string,std::string > *result = 0 ;
  
  result = (std::unordered_map< std::string,std::string > *) &Microsoft::Azure::Gaming::GSDK::getConfigSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_start__SWIG_0___(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Microsoft::Azure::Gaming::GSDK::start(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_start__SWIG_1___() {
  Microsoft::Azure::Gaming::GSDK::start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_updateConnectedPlayers___(void * jarg1) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const & type is null", 0);
    return ;
  } 
  Microsoft::Azure::Gaming::GSDK::updateConnectedPlayers((std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_registerShutdownCallback___(void * jarg1) {
  std::function< void () > arg1 ;
  std::function< void () > *argp1 ;
  
  argp1 = (std::function< void () > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void () >", 0);
    return ;
  }
  arg1 = *argp1; 
  Microsoft::Azure::Gaming::GSDK::registerShutdownCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_registerHealthCallback___(void * jarg1) {
  std::function< bool () > arg1 ;
  std::function< bool () > *argp1 ;
  
  argp1 = (std::function< bool () > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< bool () >", 0);
    return ;
  }
  arg1 = *argp1; 
  Microsoft::Azure::Gaming::GSDK::registerHealthCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_registerMaintenanceCallback___(void * jarg1) {
  std::function< void (tm const &) > arg1 ;
  std::function< void (tm const &) > *argp1 ;
  
  argp1 = (std::function< void (tm const &) > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (tm const &) >", 0);
    return ;
  }
  arg1 = *argp1; 
  Microsoft::Azure::Gaming::GSDK::registerMaintenanceCallback(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_logMessage___(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  unsigned int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (unsigned int)Microsoft::Azure::Gaming::GSDK::logMessage((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_getLogsDirectory___() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &Microsoft::Azure::Gaming::GSDK::getLogsDirectory();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_HEARTBEAT_ENDPOINT_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::HEARTBEAT_ENDPOINT_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_SERVER_ID_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::SERVER_ID_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_LOG_FOLDER_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::LOG_FOLDER_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_CERTIFICATE_FOLDER_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::CERTIFICATE_FOLDER_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_TITLE_ID_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::TITLE_ID_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_BUILD_ID_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::BUILD_ID_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_REGION_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::REGION_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_SESSION_COOKIE_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::SESSION_COOKIE_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_GSDK_SESSION_ID_KEY_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Microsoft::Azure::Gaming::GSDK::SESSION_ID_KEY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_GSDK___() {
  void * jresult ;
  Microsoft::Azure::Gaming::GSDK *result = 0 ;
  
  result = (Microsoft::Azure::Gaming::GSDK *)new Microsoft::Azure::Gaming::GSDK();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_GSDK___(void * jarg1) {
  Microsoft::Azure::Gaming::GSDK *arg1 = (Microsoft::Azure::Gaming::GSDK *) 0 ;
  
  arg1 = (Microsoft::Azure::Gaming::GSDK *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_Clear___(void * jarg1) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_Add___(void * jarg1, void * jarg2) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  Microsoft::Azure::Gaming::ConnectedPlayer *arg2 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Microsoft::Azure::Gaming::ConnectedPlayer const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Microsoft::Azure::Gaming::ConnectedPlayer const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >::size_type result;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  result = ((std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >::size_type result;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  result = ((std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >::size_type arg2 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ConnectedPlayerVector__SWIG_0___() {
  void * jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *result = 0 ;
  
  result = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)new std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ConnectedPlayerVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = 0 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *result = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)new std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >((std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ConnectedPlayerVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)new_std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  SwigValueWrapper< Microsoft::Azure::Gaming::ConnectedPlayer > result;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Microsoft::Azure::Gaming::ConnectedPlayer((const Microsoft::Azure::Gaming::ConnectedPlayer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  Microsoft::Azure::Gaming::ConnectedPlayer *result = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Microsoft::Azure::Gaming::ConnectedPlayer *) &std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  Microsoft::Azure::Gaming::ConnectedPlayer *arg3 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Microsoft::Azure::Gaming::ConnectedPlayer const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__setitem(arg1,arg2,(Microsoft::Azure::Gaming::ConnectedPlayer const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg2 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__AddRange(arg1,(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *result = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  Microsoft::Azure::Gaming::ConnectedPlayer *arg3 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Microsoft::Azure::Gaming::ConnectedPlayer const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Insert(arg1,arg2,(Microsoft::Azure::Gaming::ConnectedPlayer const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg3 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__InsertRange(arg1,arg2,(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  Microsoft::Azure::Gaming::ConnectedPlayer *arg1 = 0 ;
  int arg2 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *result = 0 ;
  
  arg1 = (Microsoft::Azure::Gaming::ConnectedPlayer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Microsoft::Azure::Gaming::ConnectedPlayer const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Repeat((Microsoft::Azure::Gaming::ConnectedPlayer const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConnectedPlayerVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  int arg2 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg3 = 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Microsoft_Azure_Gaming_ConnectedPlayer_Sg__SetRange(arg1,arg2,(std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_ConnectedPlayerVector___(void * jarg1) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *) 0 ;
  
  arg1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ConfigSettingMap__SWIG_0___() {
  void * jresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ConfigSettingMap__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string,std::less< std::string > > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string,std::less< std::string > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string,std::less< std::string > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string,std::less< std::string > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_size___(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::size_type result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_Clear___(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_getitem___(void * jarg1, char * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,std::string >::mapped_type *) &std_map_Sl_std_string_Sc_std_string_Sg__getitem(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_setitem___(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_std_string_Sc_std_string_Sg__setitem(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_ContainsKey___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_Add___(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__Add(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_Remove___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (std::map< std::string,std::string,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_get_next_key___(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,std::string >::key_type *) &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ConfigSettingMap_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_ConfigSettingMap___(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ShutdownCallback_OnShutdown___(void * jarg1) {
  ShutdownCallback *arg1 = (ShutdownCallback *) 0 ;
  
  arg1 = (ShutdownCallback *)jarg1; 
  (arg1)->OnShutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_ShutdownCallback___(void * jarg1) {
  ShutdownCallback *arg1 = (ShutdownCallback *) 0 ;
  
  arg1 = (ShutdownCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_ShutdownCallback___() {
  void * jresult ;
  ShutdownCallback *result = 0 ;
  
  result = (ShutdownCallback *)new SwigDirector_interop_ShutdownCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_ShutdownCallback_director_connect___(void *objarg, SwigDirector_interop_ShutdownCallback::SWIG_Callback0_t callback0) {
  ShutdownCallback *obj = (ShutdownCallback *)objarg;
  SwigDirector_interop_ShutdownCallback *director = dynamic_cast<SwigDirector_interop_ShutdownCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_HealthCallback_OnHealthCheck___(void * jarg1) {
  unsigned int jresult ;
  HealthCallback *arg1 = (HealthCallback *) 0 ;
  bool result;
  
  arg1 = (HealthCallback *)jarg1; 
  result = (bool)(arg1)->OnHealthCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_HealthCallback___(void * jarg1) {
  HealthCallback *arg1 = (HealthCallback *) 0 ;
  
  arg1 = (HealthCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_HealthCallback___() {
  void * jresult ;
  HealthCallback *result = 0 ;
  
  result = (HealthCallback *)new SwigDirector_interop_HealthCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_HealthCallback_director_connect___(void *objarg, SwigDirector_interop_HealthCallback::SWIG_Callback0_t callback0) {
  HealthCallback *obj = (HealthCallback *)objarg;
  SwigDirector_interop_HealthCallback *director = dynamic_cast<SwigDirector_interop_HealthCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_MaintenanceCallback_OnMaintenanceScheduled___(void * jarg1, long long jarg2) {
  MaintenanceCallback *arg1 = (MaintenanceCallback *) 0 ;
  time_t arg2 ;
  
  arg1 = (MaintenanceCallback *)jarg1; 
  arg2 = (time_t)jarg2; 
  (arg1)->OnMaintenanceScheduled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_delete_interop_MaintenanceCallback___(void * jarg1) {
  MaintenanceCallback *arg1 = (MaintenanceCallback *) 0 ;
  
  arg1 = (MaintenanceCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_new_interop_MaintenanceCallback___() {
  void * jresult ;
  MaintenanceCallback *result = 0 ;
  
  result = (MaintenanceCallback *)new SwigDirector_interop_MaintenanceCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_interop_MaintenanceCallback_director_connect___(void *objarg, SwigDirector_interop_MaintenanceCallback::SWIG_Callback0_t callback0) {
  MaintenanceCallback *obj = (MaintenanceCallback *)objarg;
  SwigDirector_interop_MaintenanceCallback *director = dynamic_cast<SwigDirector_interop_MaintenanceCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_readyForPlayers___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)readyForPlayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_getConfigSettings___() {
  void * jresult ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  result = getConfigSettings();
  jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_start___() {
  start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_updateConnectedPlayers___(void * jarg1) {
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > arg1 ;
  std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *argp1 ;
  
  argp1 = (std::vector< Microsoft::Azure::Gaming::ConnectedPlayer > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< Microsoft::Azure::Gaming::ConnectedPlayer >", 0);
    return ;
  }
  arg1 = *argp1; 
  updateConnectedPlayers(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_registerShutdownCallback___(void * jarg1) {
  ShutdownCallback *arg1 = (ShutdownCallback *) 0 ;
  
  arg1 = (ShutdownCallback *)jarg1; 
  registerShutdownCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_registerHealthCallback___(void * jarg1) {
  HealthCallback *arg1 = (HealthCallback *) 0 ;
  
  arg1 = (HealthCallback *)jarg1; 
  registerHealthCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_registerMaintenanceCallback___(void * jarg1) {
  MaintenanceCallback *arg1 = (MaintenanceCallback *) 0 ;
  
  arg1 = (MaintenanceCallback *)jarg1; 
  registerMaintenanceCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_logMessage___(char * jarg1) {
  std::string arg1 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg1)->assign(jarg1); 
  logMessage(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MicrosoftfPlayfabfGaming_getLogsDirectory___() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &getLogsDirectory();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

